/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Alias {
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "emailAddress")]
    pub email_address: String,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "inboxId", skip_serializing_if = "Option::is_none")]
    pub inbox_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "proxied", skip_serializing_if = "Option::is_none")]
    pub proxied: Option<bool>,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}

impl Alias {
    pub fn new(created_at: String, email_address: String, updated_at: String) -> Alias {
        Alias {
            created_at,
            email_address,
            id: None,
            inbox_id: None,
            name: None,
            proxied: None,
            updated_at,
            user_id: None,
        }
    }
}


